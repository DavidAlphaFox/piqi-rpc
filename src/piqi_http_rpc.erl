%% Copyright 2009, 2010, 2011 Anton Lavrik
%%
%% Licensed under the Apache License, Version 2.0 (the "License");
%% you may not use this file except in compliance with the License.
%% You may obtain a copy of the License at
%%
%%     http://www.apache.org/licenses/LICENSE-2.0
%%
%% Unless required by applicable law or agreed to in writing, software
%% distributed under the License is distributed on an "AS IS" BASIS,
%% WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
%% See the License for the specific language governing permissions and
%% limitations under the License.

-module(piqi_http_rpc).

-compile(export_all).


%-include_lib("webmachine/include/webmachine.hrl").


%
% Webmachine callbacks
%


-record(context, {
    skel_mod,   % Piqi-RPC skeleton module generated by piqic-erlang-rpc
    impl_mod    % Piqi-RPC implementation module containing callback functions
}).


init([SkelMod, ImplMod]) ->
    Context = #context{
        skel_mod = SkelMod,
        impl_mod = ImplMod
    },
    {ok, Context}.


allowed_methods(ReqData, Context) ->
    Methods =
        case wrq:disp_path(ReqData) of
            "" -> ['GET']; % get_piqi
            "/" -> ['GET']; % XXX: another way of getting Piqi
            _ ->
                % TODO: check function name -- at the very least it
                % shouldn't contain "/" characters
                ['POST']
        end,
    % Otherwise, return 405 Method not allowed
    {Methods, ReqData, Context}.


known_content_type(ReqData, Context) ->
    IsKnownType =
        case wrq:get_req_header("content-type", ReqData) of
            "application/json" -> true;
            % XXX: or use "application/octet-stream" instead?
            "application/protobuf" -> true;
            _ -> false
        end,
    % Otherwise, return 415 Unsupported media type
    {IsKnownType, ReqData, Context}.


content_types_provided(ReqData, Context) ->
    % for all other types 406 Not Acceptable will be returned
    ContentTypes = [
        % XXX: or use "application/octet-stream" instead?
        {"application/protobuf", get_piqi_pb}
        % TODO:
        %{"application/json", get_piqi_json}
    ],
    {ContentTypes, ReqData, Context}.


content_types_accepted(ReqData, Context) ->
    % for all other types 415 Unsupported media type will be returned
    ContentTypes = [
        % XXX: or use "application/octet-stream" instead?
        {"application/protobuf", rpc_pb},
        {"application/json", rpc_json}
    ],
    {ContentTypes, ReqData, Context}.


malformed_request(ReqData, Context) ->
    IsMalformed =
        case wrq:req_qs(ReqData) of
            "" ->
                NewReqData = ReqData,
                false;
            _ ->
                NewReqData = wrq:set_resp_body(ReqData, <<"empty query string expected">>),
                true  % return 400 Bad request
        end,
    {IsMalformed, NewReqData, Context}.
    %{{halt, 400}, NewReqData, Context}


%
% Main RPC method handlers
%

get_piqi_pb(ReqData, Context) ->
    SkelMod = Context#context.skel_mod,
    Body = SkelMod:get_piqi(),
    {Body, ReqData, Context}.


rpc_pb(ReqData, Context) ->
    rpc(ReqData, Context, pb).


rpc_json(ReqData, Context) ->
    rpc(ReqData, Context, json).


rpc(ReqData, Context, InputFormat) ->
    FuncName = list_to_binary(wrq:disp_path(ReqData)),
    InputData = wrq:req_body(ReqData),
    % TODO: determine output format from "Accept" header
    OutputFormat = InputFormat,

    SkelMod = Context#context.skel_mod,
    ImplMod = Context#context.impl_mod,

    % make the actual call
    Res = SkelMod:rpc(ImplMod, FuncName, InputData, InputFormat, OutputFormat),
    todo.

